
name: 'AppEcrAction'
description: 'Check and create an ecr for microservice'
inputs:
  aws-role:
    description: 'Aws role to apply changes'
    required: true
  aws-region:
    description: 'Aws region'
    default: 'eu-central-1'
  environment:
    description: 'Finalcad envrionment: production, staging, sandbox'
    require: true
  registry:
    description: 'Registry name'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials for security
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role }}
        role-session-name: OIDCSession
    - name: Check if registry exists
      id: registry
      shell: bash
      env:
        REPO_NAME: ${{ inputs.registry }}
      run: |
        registry=$(aws ecr describe-repositories --repository-names ${REPO_NAME} --query "repositories[].[repositoryName]" --output text --no-cli-pager 2>/dev/null) || echo ""
        echo "registry=${registry}" >> $GITHUB_OUTPUT
    - name: Create registry if missing
      shell: bash
      env:
        REPO_NAME: ${{ inputs.registry }}
        ENVIRONMENT: ${{ inputs.environment }}
      if: steps.registry.outputs.registry == ''
      run: |
        applicationid=$(basename "${REPO_NAME}")
        aws ecr create-repository --repository-name ${REPO_NAME} --tags "[{\"Key\":\"ApplicationID\",\"Value\":\"${applicationid}\"},{\"Key\":\"Environment\",\"Value\":\"${ENVIRONMENT^}\"}]"
    - name: Create registry lifecycle if missing
      shell: bash
      env:
        REPO_NAME: ${{ inputs.registry }}
        ENVIRONMENT: ${{ inputs.environment }}
      if: steps.registry.outputs.registry == ''
      run: |
        case "$ENVIRONMENT" in
          sandbox)
            retention=5
            ;;

          staging)
            retention=10
            ;;

          production)
            retention=10
            ;;

          *)
            retention=10
            ;;
        esac
        data=""
        template=$(cat ${GITHUB_ACTION_PATH}/policy.json)
        printf -v data "${template}" "${retention}" "${retention}"
        aws ecr put-lifecycle-policy \
            --repository-name ${REPO_NAME} \
            --lifecycle-policy-text "$data"
